{"version":3,"sources":["components/Weather.js","App.js","reportWebVitals.js","index.js"],"names":["Tempapp","console","log","process","useState","data","setData","search","setSearch","inputRef","useRef","useEffect","fetchApi","a","url","fetch","response","json","resJson","main","current","focus","className","type","ref","value","placeholder","onChange","e","target","charAt","toUpperCase","slice","temp","temp_min","temp_max","App","Weather","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PAoFeA,EAjFC,WAEZC,QAAQC,IAAIC,yLAEZ,MAAsBC,mBAAS,MAA/B,mBAAKC,EAAL,KAAWC,EAAX,KACA,EAA0BF,mBAAS,IAAnC,mBAAKG,EAAL,KAAaC,EAAb,KAEMC,EAAWC,mBAmCjB,OA/BAC,qBAAU,WAIN,IAAMC,EAAQ,uCAAG,gCAAAC,EAAA,6DAEPC,EAFO,4DAEoDP,EAFpD,+BAEiFJ,mCAFjF,2BAKUY,MAAMD,GALhB,cAKPE,EALO,gBAOSA,EAASC,OAPlB,OAOPC,EAPO,OASbZ,EAAQY,EAAQC,MATH,2CAAH,qDAcdV,EAASW,QAAQC,QAGjBT,MACF,CAACL,IAUC,mCAEQ,sBAAKe,UAAU,cAAf,UACI,oBAAIA,UAAU,UAAd,yBACA,uBACAA,UAAU,YACNC,KAAK,SACLC,IAAKf,EACLgB,MAAOlB,EACPmB,YAAY,cACZC,SAhBpB,SAAqBC,GACjBpB,EAAUoB,EAAEC,OAAOJ,MAAMK,OAAO,GAAGC,cAAcH,EAAEC,OAAOJ,MAAMO,MAAM,OAkB1D3B,EAEI,qCACA,6BAAKE,EAAOuB,OAAO,GAAGC,cAAcxB,EAAOyB,MAAM,KAClD,mCAAM3B,EAAK4B,KAAX,IAAiB,uCAAY,oCAA7B,OACA,uBACA,uCAAU5B,EAAK6B,SAAf,IAAyB,uCAAY,oCAArC,UAAyD7B,EAAK8B,SAA9D,IAAwE,uCAAY,0CAMnF,4BAAI,aC1DbC,MAVf,WACE,OACE,sBAAKd,UAAU,MAAf,UACE,wBAAQA,UAAU,eAElB,cAACe,EAAD,QCISC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3e53367d.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport './style.css';\r\n\r\nconst Tempapp = () => {\r\n\r\n    console.log(process.env);\r\n\r\n    let [data, setData] = useState(null);\r\n    let [search, setSearch] = useState('');\r\n\r\n    const inputRef = useRef();\r\n\r\n    \r\n\r\n    useEffect(() => {\r\n        \r\n\r\n\r\n        const fetchApi = async () => {\r\n\r\n            const url = `https://api.openweathermap.org/data/2.5/weather?q=${search}&units=metric&appid=${process.env.REACT_APP_API_KEY}\r\n            `\r\n\r\n           const  response = await fetch(url);\r\n\r\n            const resJson = await response.json();\r\n            \r\n            setData(resJson.main);\r\n            \r\n            \r\n        }\r\n        \r\n        inputRef.current.focus();\r\n\r\n\r\n        fetchApi();\r\n    },[search]);\r\n\r\n\r\n\r\n    function handleInput(e) {\r\n        setSearch(e.target.value.charAt(0).toUpperCase()+e.target.value.slice(1));// for making first alphabet capital e.g.-> Abc but without e.target.value.charAt(0).toUpperCase()+e.target.value.slice(1).charAt() the o/p is abc\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n               \r\n                <div className=\"weatherBody\">\r\n                    <h1 className=\"heading\">Weather App</h1>\r\n                    <input\r\n                    className=\"inputData\"\r\n                        type=\"search\"\r\n                        ref={inputRef}\r\n                        value={search}\r\n                        placeholder=\"Search City\"\r\n                        onChange={handleInput}\r\n                    />\r\n                     {\r\n                    data ? (\r\n\r\n                        <>\r\n                        <h1>{search.charAt(0).toUpperCase()+search.slice(1)}</h1>\r\n                       <h2> {data.temp} <sup>°</sup><sup>C</sup> </h2>\r\n                       <br/>\r\n                       <h5>Min: {data.temp_min} <sup>°</sup><sup>C</sup> | Max:{data.temp_max} <sup>°</sup><sup>C</sup></h5>\r\n                       </>\r\n                       \r\n                    ) :\r\n                    (\r\n                        \r\n                        <p>{null}</p>\r\n                    )\r\n                }\r\n\r\n\r\n                </div>\r\n\r\n        </>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default Tempapp;","import Weather from './components/Weather';\n// import './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      </header>\n      <Weather/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}